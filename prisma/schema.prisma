// url      = env("DATABASE_URL")
// schema.prisma

datasource db {
  provider = "postgresql"
  // url      = env("DATABASE_URL")
  url      = "postgresql://postgres:8140991135@localhost:9000/CPM"
}

generator client {
  provider      = "prisma-client-js"
  // output        = "../src/generated/client"
  binaryTargets = ["native", "windows"]
}

enum Role {
  admin
  team_member
  partner
  super_admin
  sub_admin
}

enum OfferType {
  percentage
  fixed
  free_trial
}

enum SubscriptionStatus {
  active
  canceled
  past_due
  free_trial
  suspended
  pending
  expired
  inactive
  under_review
  blocked
}

enum renewPeriod {
  monthly
  quarterly
  yearly
  half_yearly
  custom
}

// ——————————————————————————————————————————
// SuperAdmin
// ——————————————————————————————————————————
model SuperAdmin {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firstName    String   @map("first_name")
  lastName     String   @map("last_name")
  email        String   @unique
  passwordHash String   @map("password_hash")
  contactInfo  Json?    @map("contact_info")
  address      Json?
  status       Boolean  @default(true)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  loginCreds LoginCredential[] @relation("SuperAdminCredentials")

  @@map("super_admins")
}

// ——————————————————————————————————————————
// Admin
// ——————————————————————————————————————————
model Admin {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role         Role     @default(admin)
  firstName    String   @map("first_name")
  lastName     String   @map("last_name")
  email        String   @unique
  passwordHash String   @map("password_hash")
  companyName  String   @map("company_name")
  address      Json?
  contactInfo  Json?    @map("contact_info")
  status       Boolean  @default(true)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  teamMembers      TeamMember[]
  partners         Partner[]
  customers        Customer[]
  customFields     AdminCustomField[]
  products         Product[]
  subscriptions    Subscription[]
  loginCreds       LoginCredential[]        @relation("AdminCredentials")
  productHistories CustomerProductHistory[]

  @@map("admins")
}

// ——————————————————————————————————————————
// TeamMember
// ——————————————————————————————————————————
model TeamMember {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  adminId      String   @map("admin_id") @db.Uuid
  role         Role     @default(team_member)
  firstName    String   @map("first_name")
  lastName     String   @map("last_name")
  email        String   @unique
  passwordHash String   @map("password_hash")
  department   String?
  position     String?
  status       Boolean  @default(true)
  contactInfo  Json?    @map("contact_info")
  address      Json?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  admin Admin @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId])
  @@map("team_members")
}

// ——————————————————————————————————————————
// Partner
// ——————————————————————————————————————————
model Partner {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  adminId      String   @map("admin_id") @db.Uuid
  role         Role     @default(partner)
  companyName  String   @map("company_name")
  firstName    String   @map("first_name")
  lastName     String   @map("last_name")
  contactInfo  Json?    @map("contact_info")
  address      Json?
  email        String   @unique
  passwordHash String   @map("password_hash")
  status       Boolean  @default(true)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  admin     Admin      @relation(fields: [adminId], references: [id], onDelete: Cascade)
  customers Customer[] @relation("PartnerCustomers")

  @@index([adminId])
  @@map("partners")
}

// ——————————————————————————————————————————
// LoginCredential
// ——————————————————————————————————————————
model LoginCredential {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role          Role
  email         String   @unique
  passwordHash  String   @map("password_hash")
  userProfileId String   @map("user_profile_id") @db.Uuid
  adminId       String?  @map("admin_id") @db.Uuid
  status        Boolean  @default(true)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  superAdminId  String?  @db.Uuid

  admin       Admin?       @relation("AdminCredentials", fields: [adminId], references: [id], onDelete: Cascade)
  superadmin  SuperAdmin?  @relation("SuperAdminCredentials", onDelete: Cascade, fields: [superAdminId], references: [id])
  loginAudits LoginAudit[]

  @@index([adminId])
  @@map("login_credentials")
}

// ——————————————————————————————————————————
// Plan & Related
// ——————————————————————————————————————————
model Plan {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  duration  String
  price     Float
  status    Boolean  @default(true) @map("status")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  offers        PlanOffer[]
  specs         PlanSpec[]
  descriptions  PlanDescription[]
  subscriptions Subscription[]

  @@map("plans")
}

model PlanOffer {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  planId    String    @map("plan_id") @db.Uuid
  offerType OfferType @map("offer_type")
  value     Float?
  startsAt  DateTime? @map("starts_at")
  endsAt    DateTime? @map("ends_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  plan Plan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@index([planId])
  @@map("plan_offers")
}

model PlanSpec {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  planId    String   @map("plan_id") @db.Uuid
  specName  String   @map("spec_name")
  specValue String   @map("spec_value")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  plan Plan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@index([planId])
  @@map("plan_specs")
}

model PlanDescription {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  planId    String   @map("plan_id") @db.Uuid
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  plan Plan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@index([planId])
  @@map("plan_descriptions")
}

// ——————————————————————————————————————————
// Subscription & Payment/Event
// ——————————————————————————————————————————
model Subscription {
  id          String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  adminId     String             @db.Uuid
  planId      String             @db.Uuid
  status      SubscriptionStatus
  startsAt    DateTime           @map("starts_at")
  endsAt      DateTime?          @map("ends_at")
  renewedAt   DateTime?          @map("renewed_at")
  cancelledAt DateTime?          @map("cancelled_at")
  createdAt   DateTime           @default(now()) @map("created_at")
  updatedAt   DateTime           @updatedAt @map("updated_at")

  admin    Admin                 @relation(fields: [adminId], references: [id], onDelete: Cascade)
  plan     Plan                  @relation(fields: [planId], references: [id], onDelete: Cascade)
  payments SubscriptionPayment[]
  events   SubscriptionEvent[]

  @@index([adminId])
  @@index([planId])
  @@map("subscriptions")
}

model SubscriptionPayment {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subscriptionId  String   @map("subscription_id") @db.Uuid
  amount          Float
  currency        String   @db.Char(3)
  paidAt          DateTime @map("paid_at")
  status          String
  paymentMethod   String?  @map("payment_method")
  gatewayResponse Json?    @map("gateway_response")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
  @@map("subscription_payments")
}

model SubscriptionEvent {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subscriptionId String   @map("subscription_id") @db.Uuid
  eventType      String   @map("event_type")
  eventAt        DateTime @map("event_at")
  metadata       Json?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
  @@map("subscription_events")
}

// ——————————————————————————————————————————
// Product & Renewal History
// ——————————————————————————————————————————
model Product {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productName     String   @map("product_name")
  productCategory Json     @map("product_category")
  productPrice    String   @map("product_price")
  description     String?
  productLink     String?  @map("product_link")
  tags            String[] @db.Text
  specifications  Json
  adminId         String   @db.Uuid
  status          Boolean  @default(true)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  admin                  Admin                    @relation(fields: [adminId], references: [id], onDelete: Cascade)
  customerProductHistory CustomerProductHistory[]
  renewalHistory         ProductRenewalHistory[]

  @@index([adminId])
  @@map("products")
}

model ProductRenewalHistory {
  id                       String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customerProductHistoryId String    @map("customer_product_history_id") @db.Uuid
  productId                String    @map("product_id") @db.Uuid
  purchaseDate             DateTime  @map("purchase_date")
  renewalDate              DateTime? @map("renewal_date")
  expiryDate               DateTime? @map("expiry_date")
  createdAt                DateTime  @default(now()) @map("created_at")
  updatedAt                DateTime  @updatedAt @map("updated_at")

  customerProductHistory CustomerProductHistory @relation(fields: [customerProductHistoryId], references: [id], onDelete: Cascade)
  product                Product                @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([customerProductHistoryId])
  @@index([productId])
  @@map("product_renewal_history")
}

// ——————————————————————————————————————————
// Customer & History
// ——————————————————————————————————————————
model Customer {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  adminId           String?   @db.Uuid
  companyName       String   @map("company_name")
  contactPerson     String   @map("contact_person")
  mobileNumber      String   @unique @map("mobile_number")
  email             String   @unique
  serialNo          String   @map("serial_no")
  prime             Boolean  @default(false)
  blacklisted       Boolean  @default(false)
  remark            String?
  adminCustomFields Json?
  address           Json?




  
  joiningDate       DateTime @map("joining_date")
  hasReference      Boolean  @default(false) @map("has_reference")
  partnerId         String?  @map("partner_id") @db.Uuid
  status            Boolean  @default(true) @map("status")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  admin   Admin?                    @relation(fields: [adminId], references: [id], onDelete: Cascade)
  partner Partner?                 @relation("PartnerCustomers", fields: [partnerId], references: [id])
  history CustomerProductHistory[]

  @@index([adminId])
  @@index([partnerId])
  @@index([adminId, partnerId])
  @@index([adminId], name: "idx_customers_admin")
  @@index([partnerId], name: "idx_customers_partner")
  @@index([status], name: "idx_customers_status")
  @@index([companyName], name: "idx_customers_companyName")
  @@index([contactPerson], name: "idx_customers_contactPerson")
  @@index([mobileNumber], name: "idx_customers_mobileNumber")
  @@index([serialNo], name: "idx_customers_serialNo")
  @@map("customers")
}

model CustomerProductHistory {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customerId   String      @map("customer_id") @db.Uuid
  adminId      String      @map("admin_id") @db.Uuid
  productId    String      @map("product_id") @db.Uuid
  purchaseDate DateTime    @map("purchase_date")
  renewal      Boolean     @default(false)
  renewPeriod  renewPeriod @default(custom)
  expiryDate   DateTime?   @map("expiry_date")
  renewalDate  DateTime?   @map("renewal_date")
  status       Boolean     @default(true) @map("status")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  customer Customer                @relation(fields: [customerId], references: [id], onDelete: Cascade)
  admin    Admin                   @relation(fields: [adminId], references: [id], onDelete: Cascade)
  product  Product                 @relation(fields: [productId], references: [id], onDelete: Cascade)
  renewals ProductRenewalHistory[]

  @@index([customerId])
  @@index([adminId])
  @@index([productId])
  @@index([expiryDate])
  @@map("customer_product_history")
}

// ——————————————————————————————————————————
// AdminCustomField
// ——————————————————————————————————————————
model AdminCustomField {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  adminId       String   @map("admin_id") @db.Uuid
  fieldName     String   @map("field_name")
  fieldType     String   @map("field_type")
  isRequired    Boolean  @default(false) @map("is_required")
  options       String[] @default([]) @db.Text
  isMultiSelect Boolean  @default(false) @map("is_multi_select")
  status        Boolean  @default(true)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  admin Admin @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId])
  @@map("admin_custom_fields")
}

// ——————————————————————————————————————————
// LoginAudit & OPT
// ——————————————————————————————————————————
model LoginAudit {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  loginCredentialId String   @map("login_credential_id") @db.Uuid
  attemptTime       DateTime @default(now()) @map("attempt_time")
  success           Boolean
  ipAddress         String   @map("ip_address")
  userAgent         String   @map("user_agent")
  createdAt         DateTime @default(now()) @map("created_at")

  loginCredential LoginCredential @relation(fields: [loginCredentialId], references: [id], onDelete: Cascade)

  @@index([loginCredentialId])
  @@map("login_audit")
}

model PasswordOtp {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @db.Uuid // FK to Admin, Partner, etc.
  otp       String   @db.Char(6) // e.g. 6‑digit code
  purpose   String   @db.VarChar(32) // e.g. "forgot_password"
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  @@index([userId, purpose])
  @@map("password_otps")
}

// ——————————————————————————————————————————
// Index
// ——————————————————————————————————————————
