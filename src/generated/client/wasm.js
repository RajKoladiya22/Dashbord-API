
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.SuperAdminScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  passwordHash: 'passwordHash',
  contactInfo: 'contactInfo',
  address: 'address',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  role: 'role',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  passwordHash: 'passwordHash',
  companyName: 'companyName',
  address: 'address',
  contactInfo: 'contactInfo',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TeamMemberScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  role: 'role',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  passwordHash: 'passwordHash',
  department: 'department',
  position: 'position',
  status: 'status',
  contactInfo: 'contactInfo',
  address: 'address',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PartnerScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  role: 'role',
  companyName: 'companyName',
  firstName: 'firstName',
  lastName: 'lastName',
  contactInfo: 'contactInfo',
  address: 'address',
  email: 'email',
  passwordHash: 'passwordHash',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LoginCredentialScalarFieldEnum = {
  id: 'id',
  role: 'role',
  email: 'email',
  passwordHash: 'passwordHash',
  userProfileId: 'userProfileId',
  adminId: 'adminId',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  superAdminId: 'superAdminId'
};

exports.Prisma.PlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  duration: 'duration',
  price: 'price',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlanOfferScalarFieldEnum = {
  id: 'id',
  planId: 'planId',
  offerType: 'offerType',
  value: 'value',
  startsAt: 'startsAt',
  endsAt: 'endsAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlanSpecScalarFieldEnum = {
  id: 'id',
  planId: 'planId',
  specName: 'specName',
  specValue: 'specValue',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlanDescriptionScalarFieldEnum = {
  id: 'id',
  planId: 'planId',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  planId: 'planId',
  status: 'status',
  startsAt: 'startsAt',
  endsAt: 'endsAt',
  renewedAt: 'renewedAt',
  cancelledAt: 'cancelledAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscriptionPaymentScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  amount: 'amount',
  currency: 'currency',
  paidAt: 'paidAt',
  status: 'status',
  paymentMethod: 'paymentMethod',
  gatewayResponse: 'gatewayResponse',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscriptionEventScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  eventType: 'eventType',
  eventAt: 'eventAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  productName: 'productName',
  productCategory: 'productCategory',
  productPrice: 'productPrice',
  description: 'description',
  productLink: 'productLink',
  tags: 'tags',
  specifications: 'specifications',
  adminId: 'adminId',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductRenewalHistoryScalarFieldEnum = {
  id: 'id',
  customerProductHistoryId: 'customerProductHistoryId',
  productId: 'productId',
  purchaseDate: 'purchaseDate',
  renewalDate: 'renewalDate',
  expiryDate: 'expiryDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  companyName: 'companyName',
  contactPerson: 'contactPerson',
  mobileNumber: 'mobileNumber',
  email: 'email',
  serialNo: 'serialNo',
  prime: 'prime',
  blacklisted: 'blacklisted',
  remark: 'remark',
  adminCustomFields: 'adminCustomFields',
  address: 'address',
  joiningDate: 'joiningDate',
  hasReference: 'hasReference',
  partnerId: 'partnerId',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomerProductHistoryScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  adminId: 'adminId',
  productId: 'productId',
  purchaseDate: 'purchaseDate',
  renewal: 'renewal',
  renewPeriod: 'renewPeriod',
  expiryDate: 'expiryDate',
  renewalDate: 'renewalDate',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminCustomFieldScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  fieldName: 'fieldName',
  fieldType: 'fieldType',
  isRequired: 'isRequired',
  options: 'options',
  isMultiSelect: 'isMultiSelect',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LoginAuditScalarFieldEnum = {
  id: 'id',
  loginCredentialId: 'loginCredentialId',
  attemptTime: 'attemptTime',
  success: 'success',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.PasswordOtpScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  otp: 'otp',
  purpose: 'purpose',
  used: 'used',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  admin: 'admin',
  team_member: 'team_member',
  partner: 'partner',
  super_admin: 'super_admin',
  sub_admin: 'sub_admin'
};

exports.OfferType = exports.$Enums.OfferType = {
  percentage: 'percentage',
  fixed: 'fixed',
  free_trial: 'free_trial'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  active: 'active',
  canceled: 'canceled',
  past_due: 'past_due',
  free_trial: 'free_trial',
  suspended: 'suspended',
  pending: 'pending',
  expired: 'expired',
  inactive: 'inactive',
  under_review: 'under_review',
  blocked: 'blocked'
};

exports.renewPeriod = exports.$Enums.renewPeriod = {
  monthly: 'monthly',
  quarterly: 'quarterly',
  yearly: 'yearly',
  half_yearly: 'half_yearly',
  custom: 'custom'
};

exports.Prisma.ModelName = {
  SuperAdmin: 'SuperAdmin',
  Admin: 'Admin',
  TeamMember: 'TeamMember',
  Partner: 'Partner',
  LoginCredential: 'LoginCredential',
  Plan: 'Plan',
  PlanOffer: 'PlanOffer',
  PlanSpec: 'PlanSpec',
  PlanDescription: 'PlanDescription',
  Subscription: 'Subscription',
  SubscriptionPayment: 'SubscriptionPayment',
  SubscriptionEvent: 'SubscriptionEvent',
  Product: 'Product',
  ProductRenewalHistory: 'ProductRenewalHistory',
  Customer: 'Customer',
  CustomerProductHistory: 'CustomerProductHistory',
  AdminCustomField: 'AdminCustomField',
  LoginAudit: 'LoginAudit',
  PasswordOtp: 'PasswordOtp'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
